{"name": "test_add_3_items_and_finish", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n0   chromedriver                        0x0000000104e5b570 cxxbridge1$str$ptr + 2731064\n1   chromedriver                        0x0000000104e53468 cxxbridge1$str$ptr + 2698032\n2   chromedriver                        0x00000001049a23f8 cxxbridge1$string$len + 90664\n3   chromedriver                        0x00000001049e971c cxxbridge1$string$len + 382284\n4   chromedriver                        0x0000000104a2ab1c cxxbridge1$string$len + 649548\n5   chromedriver                        0x00000001049dda0c cxxbridge1$string$len + 333884\n6   chromedriver                        0x0000000104e1e5f4 cxxbridge1$str$ptr + 2481340\n7   chromedriver                        0x0000000104e2185c cxxbridge1$str$ptr + 2494244\n8   chromedriver                        0x0000000104dff248 cxxbridge1$str$ptr + 2353424\n9   chromedriver                        0x0000000104e22118 cxxbridge1$str$ptr + 2496480\n10  chromedriver                        0x0000000104df02f8 cxxbridge1$str$ptr + 2292160\n11  chromedriver                        0x0000000104e4200c cxxbridge1$str$ptr + 2627284\n12  chromedriver                        0x0000000104e42198 cxxbridge1$str$ptr + 2627680\n13  chromedriver                        0x0000000104e530a4 cxxbridge1$str$ptr + 2697068\n14  libsystem_pthread.dylib             0x00000001907e1f94 _pthread_start + 136\n15  libsystem_pthread.dylib             0x00000001907dcd34 thread_start + 8", "trace": "self = <tests.test_checkout.TestCheckout object at 0x10246d6d0>\n\n    def test_add_3_items_and_finish(self):\n        inventory_page = InventoryPage(self.driver)\n        cart_page = CartPage(self.driver)\n        checkout_page = CheckoutPage(self.driver)\n    \n        items_to_add = [\n            \"Sauce Labs Backpack\",\n            \"Sauce Labs Bolt T-Shirt\",\n            \"Sauce Labs Onesie\"\n        ]\n    \n        print(\"Step 1: Adding 3 items to the cart\")\n        for item in items_to_add:\n            inventory_page.add_item_to_cart(item)\n            print(f\"  - Added '{item}' to cart.\")\n    \n        assert inventory_page.get_cart_item_count() == len(items_to_add), \\\n            f\"Expected {len(items_to_add)} items in cart, but found {inventory_page.get_cart_item_count()}\"\n        print(\"  - Verified 3 items are in your cart\")\n    \n        print(\"Step 2: Navigating to Your Cart and Checkout...\")\n        inventory_page.click_cart_icon()\n        assert cart_page.verify_in_cart_page(), \"Failed to navigate to cart page.\"\n        print(\"  - Navigated to Cart page.\")\n    \n        for item in items_to_add:\n            assert item in cart_page.get_item_names_in_cart(), f\"Product '{item}' not found in cart.\"\n            print(f\"  - Verified '{item}' is in the cart page.\")\n    \n        cart_page.click_checkout_button()\n        assert checkout_page.verify_in_checkout_step_one(), \"Failed to navigate to checkout step one.\"\n        print(\"  - Navigated to Checkout Step One page.\")\n    \n        print(\"Step 3: Entering user information for checkout...\")\n        first_name = \"John\"\n        last_name = \"Doe\"\n        zip_code = \"70000\"\n        checkout_page.do_continue(first_name, last_name, zip_code)\n>       assert checkout_page.verify_in_checkout_step_two(), \"Failed to navigate to checkout step two (overview).\"\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests/test_checkout.py:76: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages/checkout_page.py:47: in verify_in_checkout_step_two\n    self.wait_for_element_visible(self.finish_btn)\nbase/base_page.py:39: in wait_for_element_visible\n    return WebDriverWait(self.driver, self.timeout).until(EC.visibility_of_element_located(locator))\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"058a8843dc406c61c2b512f58dcd427f\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x1024c7ba0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       0   chromedriver                        0x0000000104e5b570 cxxbridge1$str$ptr + 2731064\nE       1   chromedriver                        0x0000000104e53468 cxxbridge1$str$ptr + 2698032\nE       2   chromedriver                        0x00000001049a23f8 cxxbridge1$string$len + 90664\nE       3   chromedriver                        0x00000001049e971c cxxbridge1$string$len + 382284\nE       4   chromedriver                        0x0000000104a2ab1c cxxbridge1$string$len + 649548\nE       5   chromedriver                        0x00000001049dda0c cxxbridge1$string$len + 333884\nE       6   chromedriver                        0x0000000104e1e5f4 cxxbridge1$str$ptr + 2481340\nE       7   chromedriver                        0x0000000104e2185c cxxbridge1$str$ptr + 2494244\nE       8   chromedriver                        0x0000000104dff248 cxxbridge1$str$ptr + 2353424\nE       9   chromedriver                        0x0000000104e22118 cxxbridge1$str$ptr + 2496480\nE       10  chromedriver                        0x0000000104df02f8 cxxbridge1$str$ptr + 2292160\nE       11  chromedriver                        0x0000000104e4200c cxxbridge1$str$ptr + 2627284\nE       12  chromedriver                        0x0000000104e42198 cxxbridge1$str$ptr + 2627680\nE       13  chromedriver                        0x0000000104e530a4 cxxbridge1$str$ptr + 2697068\nE       14  libsystem_pthread.dylib             0x00000001907e1f94 _pthread_start + 136\nE       15  libsystem_pthread.dylib             0x00000001907dcd34 thread_start + 8\n\nvenv/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:138: TimeoutException"}, "attachments": [{"name": "Lá»—i: test_add_3_items_and_finish_failure.png", "source": "ba61ead2-f6dd-42e9-b1c3-9726b578f758-attachment.png", "type": "image/png"}, {"name": "stdout", "source": "6926114f-9b00-4be6-a3f5-213153197a36-attachment.txt", "type": "text/plain"}], "start": 1753626723322, "stop": 1753626733943, "uuid": "d092b36a-838d-4b96-a253-0169810a1c33", "historyId": "f338448cc987f53dc848d2073de95883", "testCaseId": "f338448cc987f53dc848d2073de95883", "fullName": "tests.test_checkout.TestCheckout#test_add_3_items_and_finish", "labels": [{"name": "feature", "value": "Checkout Process"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_checkout"}, {"name": "subSuite", "value": "TestCheckout"}, {"name": "host", "value": "DUCs-MacBook-Air.local"}, {"name": "thread", "value": "89572-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_checkout"}]}